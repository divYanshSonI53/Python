# Tuesday, 9th April

# python ркирлА ркЕркВркжрк░ list [] brackets use ркХрк░рлА ркирлЗ ркмркирлЗ dictionary {} curly braces use ркХрк░рлА ркирлЗ ркмркирлЗ ркЕркирлЗ tuples () parenthesis use ркХрк░рлА ркирлЗ ркмркирлЗ  

# Booleans is treated as numbers in python for true(1) and for false(0) 

x = 2
y = 3
z = 4

print(x+y)

print(x+y*z) # ркЖ рк╕рк╛рк░рлА practice ркирк╛ ркХрлЗрк╡рк╛ркИ ркХрлЗрко ркХрлЗ ркЖркорк╛ркВ рккрлЗрк▓рк╛ рк╕рлБ ркерк╕рлЗ ркП ркЕрккркбркирлЗ ркиркерлА ркЦркмрк░ ркЬрлЗрко ркХрлЗ multiplication ркерк╕рлЗ ркХрлЗ addition ркерк╕рлЗ рккрлЗрк▓рк╛ ркПркЯрк▓рлЗ ркдрлЛ рк╕рк╡рк╛рк▓ ркП ркЙркарлЗ ркХ ркХрк░рк╡рлБркВ рк╢рлБркВ  

# print((x + y) * z)  ркЬрлЗ ркХрк╛рко рккрлЗрк▓рк╛ ркХрк░рк╛рк╡рлБркВ рк╣рлЛркп ркПркирлЗ parenthesis ркирлА ркЕркВркжрк░ рк▓ркИ рк▓рлЗрк╡рк╛ркирк╛ 

print(40 + 2.23) # ркЖ рк╕рк╛рк░рлА practice ркирк╛ ркХрлЗрк╡рк╛ркп  ркХрлЗрко ркХрлЗ ркмркВркирлЗ data type ркПркХ рк╕рк░ркЦрк╛ рк╣рлЛрк╡рк╛ ркЬрлЛркИркП ркдрлЛ рк╕рк╛рк░рлБркВ рк░рк╣рлАркП рк╡ркзрк╛рк░рлЗ ркдрлЛ рк╕рк╡рк╛рк▓ ркП ркЙркарлЗ ркХрлЗ ркХрк░рк╡рлБркВ рк╢рлБркВ 


print(40 + int(2.23))

# ркЕркерк╡рк╛ ркдрлЛ
 
print(float(40) + int(2.23)) # ркЖрко рккркг ркерк╛ркп 

# ЁЯСЖ ркЖркирлЗ operator overloading ркХрлЗрк╡рк╛ркп ЁЯСЖ

print('chai' + 'aur' + 'code')

print(x, y, z)

print(x + 1, y * 2) # ркПркХ ркЬ рк▓рк╛ркЗрки ркорк╛ркВ ркмркзрлБркВркп ркХрк░рк╛рк╡рлБркВ рк╣рлЛркп ркдрлЛ (,) ркЖрккрлАркП ркПркЯрк▓рлЗ ркеркИ ркЬрк╛ркп

print(y % 2) # remainder ркХрк╛ркврк╡рк╛ ркорк╛ркЯрлЗ 

print(z ** 2) # power ркЧрлЛркдрк╡рк╛ ркорк╛ркЯрлЗ, ркЖркорк╛ркВ ркерк╛ркп ркЫрлЗ рк╢рлБркВ ркХрлЗ z ркорк╛ркВ рк╢рлБркВ value ркЫрлЗ ? 4 ркдрлЛ 4 multiply  ркеркИ ркЬрк╢рлЗ 2 рк╡рк╛рк░ 

print(z ** 5)

print(100 ** 2)

print(2 ** 100)

print(2 ** 1000)

result = 1/3.0

print(result)

repr('chai')

str('chai')

print('chai')

# comparison

print(1 < 2) # python ркирлА ркЕркВркжрк░ boolean value true ркирлБркВ T рккркг capital ркЫрлЗ ркЕркирлЗ false ркирлБркВ F рккркг ркЕркирлЗ Python ркирлА ркЕркВркжрк░ True ркирлЗ 1 рккркг ркХрлЗрк╡рк╛ркп ркЕркирлЗ False ркирлЗ 0 рккркг ркХрлЗрк╡рк╛ркп

print(5.0 == 5.0)

print(4.0 != 5.0)

print(x, y, z)

print(x < y < z) # рк╣рк╡рлЗ ркЖркорк╛ркВ ркерк╛ркп ркЫрлЗ рк╢рлБркВ ркХрлЗ comparison ркХрк░рк╡рк╛ ркорк╛ркЯрлЗ ркЖ рк░рлАркд рк╕рк╛ркЪрлА ркЬ ркЫрлЗ рккркг ркЖ рк░рлАркд ркирлЛ рк╡рккрлНрк░рк╛рк╕ ркмркВркирлЗ ркдрлНркпрк╛ркВ рк╕рлБркзрлА ркирк╛ ркХрк░рк╛ркп ркЬрлЗрко ркХ ркЖ example ркорк╛ркВ рккрлВркЫрк╡рк╛ рк╕рлБ ркорк╛ркВркЧрлЗ ркЫрлЗ ркХрлЗ рк╢рлБркВ 'x' 'y' ркерлА ркирк╛ркирлБркВ ркЫрлЗ ркдрлЛ ркХрлЗ рк╣рк╛ ркирк╛ркирлБркВ ркЫрлЗ ркирлЗ рккрк░ркд рккрлВркЫрлЗ ркЫрлЗ ркХрлЗ рк╢рлБркВ 'y' 'z' ркерлА ркирк╛ркирлБркВ ркЫрлЗ ркдрлЛ ркХрлЗ рк╣рк╛ ркирк╛ркирлБркВ ркЫрлЗ ркдрлЛ ркЖркорк╛ркВ ркХрк░рк╛ркп рк╢рлБркВ ркП ркирлАркЪрлЗ ркжрк░рлНрк╢рк╛рк╡рлЗрк▓ ркЫрлЗ тмЗя╕П

print(x < y and y < z) # ркЖркорк╛ркВ and operator ркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлЗрк▓ ркЫрлЗ ркЕркирлЗ ркмркВркирлЗ ркдрлНркпрк╛ркВ рк╕рлБркзрлА ркЖркирлЛ ркЬ ркЙрккркпрлЛркЧ ркХрк░рк╛ркп 

print(x < y or y > z) # ркЖркорк╛ркВ or operator ркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлЗрк▓ ркЫрлЗ ркЕркирлЗ ркмркВркирлЗ ркдрлНркпрк╛ркВ рк╕рлБркзрлА ркЖркирлЛ ркЬ ркЙрккркпрлЛркЧ ркХрк░рк╛ркп

# рк╣рк╡рлЗ ркШркгрлА рк╡рк╛рк░ ркЖркорк╛ркВ рк╕рк╡рк╛рк▓ рк╕рлБ ркЙркарлЗ ркХрлЗ тмЗя╕П

print(1 == 2 < 3) # ркЖрко ркмркВркирлЗ ркдрлНркпрк╛ркВ рк╕рлБркзрлА ркирк╛ рк▓ркЦрк╛ркп ркПркирк╛ ркмркжрк▓рлЗ ркирлАркЪрлЗ ркжрк░рлНрк╢рк╛рк╡рлЗрк▓ ркЫрлЗ ркПрко рк▓ркЦрлЛ тмЗя╕П

print(1 == 2 and 2 < 3)

#  рк╣рк╡рлЗ python ркирлА ркЕркВркжрк░ ркШркгрлА рк╡рк╛рк░ ркПрк╡рлБркВ ркЬрлЛркИркП ркЫрлЗ ркЕрккркбрлЗ ркХрлЗ ркШркгрк╛ рк▓рлЛркХрлЛ third party libraries ркирлЛ рккркг ркЙрккркпрлЛркЧ ркХрк░рлЗ ркЫрлЗ ркПрки ркХрк░рк╡рлЛ рккркг ркЬрлЛркИркП ркПркирк╛ ркерлА ркЕрккркбрлЛ code powerful ркеркИ ркЬрк╛ркп 
# ркЬрлЗрко ркХрлЗ тмЗя╕П 

import math
print(math.floor(3.5)) 
print(math.floor(-3.5)) # рк╣рк╡рлЗ ркЖркорк╛ркВ floor ркХрк░рлЗ ркЫрлЗ рк╢рлБркВ ркХрлЗ ркиркВркмрк░ ркирлАркЪрлЗ рк╕рлМркерлА ркиркЬрлАркХркирлБркВ ркорлВрк▓рлНркп round off ркХрк░рлАркирлЗ ркЖрккркбркирлЗ result ркЖрккрлЗ ркЫрлЗ ркЬрлЗрко ркХрлЗ тмЗя╕П 

print(math.floor(3.6))
print(math.floor(3.9))

# Wednesday, 10th April

print(math.trunc(2.8)) # рк╣рк╡рлЗ ркЖркорк╛ркВ ркдрк░рлБркВркХ ркХрк░рлЗ ркЫрлЗ рк╢рлБркВ ркХрлЗ number line ркорк╛ркВ 0 ркмрк╛ркЬрлБ рк▓ркИ ркЬрк╛ркп ркЫрлЗ ркПркЯрк▓рлЗ ркХрлЗ ркЖ ркЙркжрк╛рк╣рк░ркг ркорк╛ркВ 2.8 рк▓ркЦрлНркпрлБркВ ркЫрлЗ ркдрлЛ 2 round off ркеркИ ркирлЗ ркЖрк╡рлА ркЬрк╕рлЗ

print(math.trunc(-3.1 )) # рк╣рк╡рлЗ ркЖркорк╛ркВ ркдрк░рлБркВркХ ркХрк░рлЗ ркЫрлЗ рк╢рлБркВ ркХрлЗ number line ркорк╛ркВ 0 ркмрк╛ркЬрлБ рк▓ркИ ркЬрк╛ркп ркЫрлЗ ркПркЯрк▓рлЗ ркХрлЗ ркЖ ркЙркжрк╛рк╣рк░ркг ркорк╛ркВ -3.1 рк▓ркЦрлНркпрлБркВ ркЫрлЗ ркдрлЛ 3 round off ркеркИ ркирлЗ ркЖрк╡рлА ркЬрк╕рлЗ

# Python ркорк╛ркВ number precision almost infinite рк╣рлЛркп ркЫрлЗ ркЬрлЗрко ркХрлЗ тмЗя╕П 

print(9999999999999999999999999999 + 1)

print(9999999999999999999999999999 + 2.1) # рккркг ркЕркЧрк░ decimal value рк╣рлЛркп ркдрлЛ ркЖ рк░рлАркд ркирк╛ ркЪрк╛рк▓рлЗ ркХрлЗрко ркХрлЗ рк╕рк░ркЦрлЛ ркЬрк╡рк╛ркм ркирк╛ ркоркбрлЗ ркдрлЛ ркПркирк╛ ркорк╛ркЯрлЗ ркХрк░рк╡рлБркВ рк╢рлБркВ тмЗя╕П 

# from decimal import Decimal

# # This will maintain precision for the integer part

# print(99999999999999999999999 + Decimal('22.1'))

# Decimal('0.1') + Decimal('0.1') + Decimal('0.1')
# Decimal('0.3')

# Decimal('0.1') + Decimal('0.1') + Decimal('0.1') - Decimal('0.3')
# Decimal('0.0')

print((2 + 1j) * 3) # ркЖ ркЙркжрк╛рк╣рк░ркг ркирлЗ imaginary numbers ркЕркерк╡рк╛ ркдрлЛ iota numbers рккркг ркХрлЗрк╡рк╛ркп 

#  Binary, Octal and Hexadecimal Examples тмЗя╕П 

# octal value ркХрлЗрко рк╕рлЛркзрк╡рлА ркПркирлБркВ ркЙркжрк╛рк╣рк░ркг тмЗя╕П 

print(0o20)

# Reverse octal

print(oct(64))

# Hexadecimal value ркХрлЗрко рк╕рлЛркзрк╡рлА ркПркирлБркВ ркЙркжрк╛рк╣рк░ркг тмЗя╕П

print(0xff)

# Reverse hexadecimal

print(hex(64))

# Binary value ркХрлЗрко рк╕рлЛркзрк╡рлА ркПркирлБркВ ркЙркжрк╛рк╣рк░ркг тмЗя╕П

print(0b1000)

# Reverse binary

print(bin(64))

# рк╣рк╡рлЗ ркЙрккрк░ ЁЯСЖ ркжрк░рлНрк╢рк╛рк╡рлЗрк▓ рк░рлАркд ркпрк╛ркж рк░рлАркП ркирк╛ рк░рлАркП ркПркирк╛ ркорк╛ркЯрлЗ ркЖрккркбрлЗ ркмрлАркЬрлБ рк╢рлБркВ ркХрк░рлА рк╕ркХрлАркП

print(int('10000', 2)) # binary 
print(int('64', 8)) # octal
print(int('64', 16)) # hexadecimal

# Random Methods 

import random

print(random.random())
print(random.random())

print(random.randint(1, 10))
print(random.randint(1, 10))
print(random.randint(1, 10))
print(random.randint(1, 10))
print(random.randint(1, 10))

l1 = ['lemon', 'masala', 'ginger', 'mint']
print(random.choice(l1))
print(random.choice(l1))
print(random.choice(l1))
print(random.choice(l1))

print(random.shuffle(l1))
print(l1)

print(random.shuffle(l1))
print(l1)

# Fraction

# from fractions import Fraction

# myFra = Fraction(2, 7) # Fraction barckets ркирлА ркЕркВркжрк░ ркЬрлЗ рк▓ркЦрлНркпрлБркВ ркЫрлЗ (2, 7) ркПркЯрк▓рлЗ ркХрлЗ 2 upon 7
# print(myFra)

# Next datatype 

# Sets

setone = {1, 2, 3, 4}

print(setone & {1, 3}) # intersection
print(setone | {1, 3}) # union
print(setone | {1, 3, 7}) # union
print(setone - {1, 3}) # difference

print(setone ^ {1, 3}) # symmetric difference

print(setone - {1, 2, 3, 4})# ркЖркорк╛ркВ рк╕рлБ ркерк╛ркп ркЫрлЗ ркХрлЗ result ркорк╛ркВ set{} рк▓ркЦрлЗрк▓рлБркВ ркЖрк╡рк╕рлЗ ркХрлЗрко ркХрлЗ {} Parenthesis ркПркХ рккрлНрк░ркХрк╛рк░ ркирлА empty dictionary рк╣рлЛркп ркЫрлЗ   

print(type({})) # ркЬрлЗрко ркХрлЗ ркЖ example ркорк╛ркВ ркХрлЛркИ рккркг object ркирлЛ рккрлНрк░ркХрк╛рк░ ркХрлЗрко ркЧрлЛркдрк╡рлЛ ркП ркжрк░рлНрк╢рк╛рк╡рлЗрк▓ ркЫрлЗ

# Boolean data type 

# print(type(true))
# print(type(false))

# next datatype 

# String

chai = "Masala Chai"
print(chai)
first_char = chai[0]
print(first_char) # Fetching String's First Character

last_char = chai[-1]

print(last_char) # Fetching String's Last Character


# String Slicing

slice_chai = chai[0:6]
print(slice_chai) 

num_list = "0123456789"

print(num_list[:])

print(num_list[3:])

print(num_list[:7])

print(num_list[0:5])

print(num_list[5:10])

print(num_list[0:10:2]) # ркЖ example ркорк╛ркВ рк╕рлБ ркерк╛ркп ркЫрлЗ ркХрлЗ ркдрлНрк░рлАркЬрлБркВ digit ркЫрлЗ ркПркЯрк▓рлЗ ркХрлЗ ркдрлНрк░рлАркЬрлБркВ parameter ркЖрккрлЗрк▓рлБркВ ркЫрлЗ 2 ркдрлЛ ркПрко ркерк╛ркп ркХрлЗркГ рк╢рлБркВ ркХрлЗ 1-1 digit ркХрлЗ letter ркЧркорлЗ ркП ркХркпрлЛ string ркорк╛ркВ ркП ркорлВркХрлАркирлЗ рк░рк┐ркЬрк▓рлНркЯ ркЖрккрлЗ ркЫрлЗ ркЬрлЗрко ркХрлЗ ркПркирк╛ ркмркжрк▓рлЗ ркЕркЧрк░ 3 рк▓ркЦрлНркпрлБркВ рк╣рлЛркп ркдрлЛ 2-2 digit ркХрлЗ letter ркорлВркХрлАркирлЗ рк░рк┐ркЬрк▓рлНркЯ ркЕрккрк╕рлЗ тмЗя╕П 

print(num_list[0:10:3])

print(num_list[::-1])


print(chai)

print(chai.lower()) #Lowercase 

print(chai.upper()) #Uppercase

print(chai.title()) #Titlecase

chai = "   Masala Chai   "

print(chai) 
print(chai.strip()) # strip ркирлЛ ркЙрккркпрлЛркЧ string ркирлА ркЕркВркжрк░ spaces ркХрк╛ркврк╡рк╛ ркорк╛ркЯрлЗ рк╣рлЛркп ркЫрлЗ 

chai = "Lemon Chai"
print(chai.replace("Lemon", "Ginger")) # replace method ркирлЛ ркЙрккркпрлЛркЧ string ркирлА ркЕркВркжрк░ ркХркИ рккркг replace ркХрк░рк╡рк╛ ркорк╛ркЯрлЗ ркерк╛ркп ркЫрлЗ ркмрлАркЬрлБркВ ркЙркжрк╛рк╣рк░ркг тмЗя╕П 

print(chai.replace("Lemon", "Ginger", 1))

chai = "Lemon, Ginger, Masala, Mint"
print(chai.split(", ")) # split method ркирлА ркЕркВркжрк░ parenthesis ркирлА ркЕркВркжрк░ parameters ркЖрккрк╡рлБркВ ркП рк╕рк╛рк░рлА practice ркХрлЗрк╡рк╛ркп ркЫрлЗ ркЬрлЗрко ркХрлЗ ркЖркорк╛ркВ parenthesis ркирлА ркЕркВркжрк░ (, ркЕркирлЗ space ркЖрккрлНркпрлБркВ ркЫрлЗ) ркПркЯрк▓рлЗ ркХрлЗ ркПркирк╛ ркерлА ркЬрлЗ рк▓рк┐рк╕рлНркЯ ркмркирк╕рлЗ ркПркирлА ркЕркВркжрк░ comma ркЕркирлЗ space ркирк╛ ркЧркгрк╛ркп

chai = "Masala Chai"
print(chai.find("Chai"))

print(chai.find("chai")) # ркЖ example ркорк╛ркВ "chai" ркирлЛ first letter small ркЫрлЗ ркПркЯрк▓рлЗ find method рк╢рлЛркзрлА ркирк╛ рк╕ркХрлНркпрлБ ркПркЯрк▓рлЗ ркПркирлБркВ result negative index ркорк╛ркВ ркЖрк╡рлЗ 

chai = "Masala Chai Chai Chai"
print(chai.count("Chai")) # ркЖ example ркорк╛ркВ string ркирлА ркЕркВркжрк░ count method ркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлА parameters ркорк╛ркВ ркЬрлЗ рк╢рлЛркзрк╡рлБркВ рк╣рлЛркп ркП pass ркХрк░рлА ркЕрккркбрлЗ ркЬрк╛ркирлА рк╕ркХрлАркП ркХрлЗ ркП рк╡рк╕рлНркдрлБ ркХрлЗркЯрк▓рлА рк╡ркЦркд string ркорк╛ркВ ркЖрк╡рлА ркЫрлЗ ркЬрлЗрко ркХрлЗ count  method ркирлБркВ ркмрлАркЬрлБркВ example ркирлАркЪрлЗ ркжрк░рлНрк╢рк╛рк╡рлЗрк▓ ркЫрлЗ тмЗя╕П 

chai = "Divyansh soni"
print(chai.count("s"))

chai_type = "Masala"
quantity = 2
order = "I ordered {} cups of {} chai"
print(order)

# format method ркирк╛ example ркорк╛ркВ ркжрк░рлНрк╢рк╛рк╡рлЗрк▓ ркЫрлЗ ркХрлЗ curly braces {} ркПркЯрк▓рлЗ ркХрлЗ placeholder ркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлАркП string ркирк╛ statement ркорк╛ркВ ркдрлЛ ркП print ркХрк░рк╛рк╡рк╛ format method ркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлА ркПрко parameters pass ркХрк░рк╡рк╛ рккркбрлЗ ркПркирлЛ example ркирлАркЪрлЗ ркжрк░рлНрк╢рк╛рк╡рлЗрк▓ ркЫрлЗ ркЬрлЗрко ркХрлЗ ркирлАркЪрлЗркирк╛ example ркорк╛ркВ variables as a parameters pass ркХрк░рлНркпрк╛ ркЫрлЗ тмЗя╕П 

print(order.format(quantity, chai_type))

print(order.format(chai_type, quantity))

chai_variety = ["Lemon", "Masala", "Ginger"]
print(chai_variety)

# ркирлАркЪрлЗ тмЗя╕П example ркорк╛ркВ ркжрк░рлНрк╢рк╛рк╡рлЗрк▓ ркЫрлЗ ркХрлЗ ркЖрккркбрлЗ ркХрлЗрк╡рлА рк░рлАркдрлЗ ркЙрккрк░ ркЬрлЗ list ркжрк░рлНрк╢рк╛рк╡рлЗрк▓ ркЫрлЗ ркПркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлА list ркирлА value ркмркзрлА joint ркХрк░рк╛рк╡рлА рк╕ркХрлАркП ркЕркирлЗ ркПркирлА ркЖркЧркб "" ркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлА ркПрко ркЬркгрк╛рк╡рлА рк╕ркХрлАркП ркХрлЗ list ркирлА ркЕркВркжрк░ ркЬрлЗ value ркЫрлЗ ркПркирлА ркЕркВркжрк░ ркЖрккркбркирлЗ space ркЬрлЛркп hyphen ркЬрлЛркп ркЕркерк╡рк╛ ркдрлЛ ркЧркорлЗ ркП рк╡рк╕рлНркдрлБ ркХрк░рк╛рк╡рлА рк╕ркХрлАркП 
 
print(" ".join(chai_variety))
print("-".join(chai_variety))
print(", ".join(chai_variety))

chai = "Masala Chai"
print(chai)

# String Length ркЬрк╛ркгрк╡рк╛ ркорк╛ркЯрлЗ ркирлАркЪрлЗ ркжрк░рлНрк╢рк╛рк╡рлЗрк▓ ркорлЗркеркб ркирлЛ ркЙрккркпрлЛркЧ ркеркИ ркЫрлЗ тмЗя╕П 

print(len(chai))

for letter in chai:
    print(letter)
# ркирлАркЪрлЗ ркжрк░рлНрк╢рк╛рк╡рлЗрк▓ example ркорк╛ркВ string statement ркирлА ркЕркВркжрк░ ркЕркЧрк░ ("") double quotes ркирлЛ ркЙрккркпрлЛркЧ ркХрк░рк╡рлЛ рк╣рлЛркп ркдрлЛ (\) backslash ркЕркерк╡рк╛ ркдрлЛ ркЖркЦрлБркВ statement ('') single quotes ркирлА ркЕркВркжрк░ рк▓ркЦрлА рк╢ркХрк╛ркп ркЫрлЗ 
 
chai = "He said, \"Masala chai is awesome\""
print(chai)

chai = 'He said, "Masala chai is awesome"'
print(chai)

# raw string example ркЬрлНркпрк╛рк░рлЗ ркЖрккркбркирлЗ (\) backslash use ркХрк░рк╡рлБркВ string statement ркХрлЗрко ркХрлЗ (\) ркПркХ unicode character escaping ркХрлЗрк╡рк╛ркп ркПркЯрк▓рлЗ ркПркирк╛ ркорк╛ркЯрлЗ raw string ркирлЛ ркЙрккркпрлЛркЧ ркХрк░рк╡рлЛ рккркбрлЗ ркЕркерк╡рк╛ ркдрлЛ windows ркорк╛ркВ path ркжрлЗрк╡рк╛ ркорк╛ркЯрлЗ ркЖркирлЛ рк╡рккрлНрк░рк╛рк╕ ркерк╛ркп ркЫрлЗ 

chai = "Masala\nChai"
print(chai) # ркЖ example ркорк╛ркВ ркерк╕рлЗ рк╢рлБркВ ркХрлЗ \n ркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлЗрк▓ ркЫрлЗ ркПркЯрк▓рлЗ Masala рккркЫрлА ркПркХ line ркорлВркХрлАркирлЗ ркЪрк╛ рк▓ркЦрлЗрк▓рлБркВ ркЖрк╡рлА ркЬрк╕рлЗ result ркорк╛ркВ 

chai = r"Masala\nChai"
print(chai)

chai = r"C:\Users\Divyansh\Downloads"
print(chai)

# string ркорк╛ркВ ркЖрккркбрлЗ рк╕рк╡рк╛рк▓ рккркг рккрлВркЫрлА рк╕ркХрлАркП ркЬрлЗрко ркХрлЗ ркирлАркЪрлЗркирк╛ example ркорк╛ркВ print ркХрк░рк╛рк╡рлНркпрлБркВ ркЫрлЗ ркдрлНркпрк╛ркВ ркжрк░рлНрк╢рк╛рк╡рлЗрк▓ ркЫрлЗ code ркорк╛ркВ ркХрлЗ рк╢рлБркВ ркдркорк╛рк░рлА chai ркирк╛рко ркирлА string ркорк╛ркВ Masala ркЫрлЗ ? ркдрлЛ ркЖркирлЛ ркЬрк╡рк╛ркм boolean value ркорк╛ркВ ркЕрк╡рк╕рлЗ true ркЕркерк╡рк╛ ркдрлЛ false 

chai = "Masala Chai"
print("Masala" in chai)

chai = "Masala Chai"
print("aa" in chai)

# ркирлАркЪрлЗркирк╛ example ркорк╛ркВ ркжрк░рлНрк╢рк╛рк╡рлЗрк▓ ркЫрлЗ ркХрлЗ list ркирлА ркЕркВркжрк░ ркирлЛ ркЬрлЗ data ркЫрлЗ ркП indexing use ркХрк░рлА fetch ркХрк░рлАркП ркЫрлАркП 
 
tea_varieties = ["black", "Green", "Oolong", "white"]
print(tea_varieties[-1])
print(tea_varieties[0])
print(tea_varieties[1])
print(tea_varieties[2])
print(tea_varieties[3])

# List ркирк╛ slicing dicing examples тмЗя╕П 

print(tea_varieties[1:3])
print(tea_varieties[1:4])
print(tea_varieties[:4])
print(tea_varieties[2:])

tea_varieties[3] = "Herbal"
print(tea_varieties)

# tea_varieties[1:2] = "Lemon"
print(tea_varieties) # ркЖ example ркорк╛ркВ рк╢рлБркВ ркерк╛ркп ркЫрлЗ ркХрлЗ tea_varieties variable ркорк╛ркВ ркЬрлЗ parameter pass ркХрк░рлНркпрлБркВ ркЫрлЗ [1:2] ркПрко select рк╢рлБркВ ркерк╕рлЗ ркХрлЗ 1 ркерлА рк▓ркИ ркирлЗ 2 рк╕рлБркзрлА ркЬрк╛ркп ркирлЗ ркПрко ркЫрлЗрк▓рлБркВ index select ркирк╛ ркерк╛ркп ркП ркдрлЛ normal ркЫрлЗ ркдрлЛ select рк╕рлБ ркерк╢рлЗ ркХрлЗ 1 ркЬ ркдрлЛ green ркирлА ркЬркЧрлНркпрк╛ ркП lemon ркЖрк╡рлА ркЬрк╕рлЗ рккркг ркП lemon word ркирлБркВ рккркг slicing ркеркИ ркЬрк╢рлЗ ркдрлЛ ркПркирлБркВ result ркЖрк╡рк╕рлЗ ['black', 'L', 'e', 'm', 'o', 'n', 'Oolong', 'Herbal']

tea_varieties[1:2] = ["Lemon"]
print(tea_varieties) # рк╣рк╡рлЗ ркЖ example ркорк╛ркВ ркжрк░рлНрк╢рк╛рк╡рлЗрк▓ ркЫрлЗ ркХрлЗ ркЙрккрк░ ркЬрлЗ example ркЫрлЗ ркорк╛ркВ ркнрлВрк▓ ркерк╛ркп ркЫрлЗ ркПркирк╛ ркерлА ркмркЪрк╡рлБркВ ркХрлЗрко ркдрлЛ ркЖ example ркорк╛ркВ ркеркпрлБркВ ркЫрлЗ рк╢рлБркВ ркХрлЗ Lemon ркирлЗ as a list treat ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрлБркВ ркЫрлЗ рк╣рк╡рлЗ ркЖркорк╛ркВ ркЖрккркбркирлЗ ркЬрлЛрк╡рк╛ркирлБркВ ркЫрлЗ рк╢рлБркВ ркХрлЗ рк╢рлБркВ ркЕрккркбрлЗ ркПркХ ркХрк░ркдрк╛ркВ рк╡ркзрк╛рк░рлЗ data list ркорк╛ркВ ркмркжрк▓рлА рк╕ркХрлАркП ркХрлЗ ркиркЗ тмЗя╕П 

tea_varieties[1:2] = ["Masala", "Ginger"]
print(tea_varieties)

print(tea_varieties[1:1]) # рк╣рк╡рлЗ ркЖ example ркорк╛ркВ рк╢рлБркВ ркерк╛ркп ркЫрлЗ ркХрлЗ parameters ркорк╛ркВ starting point ркЖрккрлНркпрлБ ркЫрлЗ 1 ркЕркирлЗ ркПркирлНркб рккркг ркХрк░рк╛рк╡рлНркпрлБркВ ркЫрлЗ 1 ркЙрккрк░ ркЬ ркПркЯрк▓рлЗ ркЖркирлБркВ result ркЖрк╡рк╕рлЗ [] list ркирлА ркЕркВркжрк░ ркХркИ ркиркЗ ркПркЯрк▓рлЗ ркЖркирлЛ ркЙрккркпрлЛркЧ рк▓рк┐рк╕рлНркЯ ркирлА ркЕркВркжрк░ data delete ркХрк░рк╡рк╛ркорк╛ рккркг ркЖрк╡рлЗ ркЫрлЗ рк╣рк╡рлЗ ркЖркЧркб тмЗя╕П

tea_varieties[1:1] = ["test", "test"]
print(tea_varieties)

print(tea_varieties[1:2])

print(tea_varieties[1:3])

tea_varieties[1:3] = []

print(tea_varieties)

for tea in tea_varieties:
    print(tea)

# for tea in tea_varieties:
    # print(tea, end="-") # рк╣рк╡рлЗ ркЖ example ркорк╛ркВ рк╢рлБркВ ркерк╛ркп ркЫрлЗ ркХрлЗ print ркирлА ркЕркВркжрк░ ркЬрлЗ statement ркорк╛ркВ end ркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлНркпрлЛ ркЫрлЗ ркЕркирлЗ ркПркирлА ркЕркВркжрк░ ркЬрлЗ - ркЙрккркпрлЛркЧ ркХрк░рлНркпрлЛ ркЫрлЗ ркПркирк╛ ркерлА ркерк╛ркп ркЫрлЗ рк╢рлБркВ ркХрлЗ result new line ркирлА ркЕркВркжрк░ ркиркЗ ркЖрк╡рлЗ ркПркирк╛ ркмркжрк▓рлЗ ркПркХ ркЬ line ркорк╛ркВ ркЕрк╡рк╕рлЗ рккркг - рк╕рк╛ркерлЗ 

print(tea_varieties)

if "Oolong" in tea_varieties:
    print("Oolong is in the list")

# Append Method ркирлБркВ example 

print(tea_varieties)
print(tea_varieties.append("Oolong"))
print(tea_varieties)

if "Oolong" in tea_varieties:
    print("I have Oolong Tea")

# Remove method ркирлБркВ example 

print(tea_varieties.remove("Oolong"))
print(tea_varieties) # remove method ркирк╛ example ркорк╛ркВ ркерк╛ркп ркЫрлЗ рк╢рлБркВ ркХрлЗ ркПркирлА ркЕркВркжрк░ ркЬрлЗ parameter ркЖрккрлЛ ркП list ркорк╛ркВ ркерлА ркХрк╛ркврлА ркирк╛ркЦрлЗ рккркг ркПркХ ркЬ рк╡рк╛рк░ 

# pop method ркирлБркВ example

print(tea_varieties.pop())
print(tea_varieties) # pop method ркирлЛ ркЙрккркпрлЛркЧ рк▓рк┐рк╕рлНркЯ ркирлА ркЕркВркжрк░ last value ркХрк╛ркврк╡рк╛ ркорк╛ркЯрлЗ ркерк╛ркп ркЫрлЗ ркЕркЧрк░ ркПркирлА ркЕркВркжрк░ ркХркИ parameters ркирк╛ ркЖрккрлНркпрк╛ рк╣рлЛркп ркдрлЛ рккркг ркЕркЧрк░ ркПркирлА ркЕркВркжрк░ indexing ркирлБркВ ркпрлБркЭ ркХрк░рлА parameters ркЖрккрлНркпрк╛ ркЫрлЗ ркдрлЛ ркП delete ркеркИ ркЬрк╢рлЗ ркЬрлЗркирлБркВ example ркирлАркЪрлЗ ркЖрккрлЗрк▓ ркЫрлЗ тмЗя╕П 

print(tea_varieties.pop(3))
print(tea_varieties)

# List ркирлА ркЕркВркжрк░ insert method ркирлЛ upyog ркирлЛ example тмЗя╕П 

tea_varieties.insert(1, "Green")
print(tea_varieties) # insert method ркирлЛ ркЙрккркпрлЛркЧ indexing ркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлА ркХрлЛркИ рккркг specific ркЬркЧрлНркпрк╛ ркЙрккрк░ data insert ркХрк░рк╡рк╛ ркорк╛ркЯрлЗ ркерк╛ркп ркЫрлЗ 

tea_varieties.insert(4, "Oolong")
print(tea_varieties)

# copy method ркирлЛ ркЙрккркпрлЛркЧ ркирлАркЪрлЗ ркжрк░рлНрк╢рк╛рк╡рлЗрк▓ ркЫрлЗ тмЗя╕П 

tea_varieties_copy = tea_varieties
print(tea_varieties_copy) # ркЖ example ркорк╛ркВ рк╢рлБркВ ркерк╛ркп ркЫрлЗ ркХрлЗ tea_varieties_copy ркирк╛рко ркирлБркВ ркирк╡рлБркВ variable ркмркирк╛рк╡рлНркпрлБркВ ркЫрлЗ ркирлЗ ркПркирлА ркЕркВркжрк░ tea_varieties list ркирлБркВ reference ркЖрккрлНркпрлБ ркЫрлЗ ркмрк╕ ркПркирлА ркХрлЛрккрлА ркиркерлА ркмркирлА ркЖ example ркорк╛ркВ ркдрлЛ copy ркХрк░рк╡рк╛ ркорк╛ркЯрлЗ ркХрк░рк╡рлБркВ рк╢рлБркВ ркПркирлБркВ example ркирлАркЪрлЗ ркжрк░рлНрк╢рк╛рк╡рлЗрк▓ ркЫрлЗ тмЗя╕П 

tea_varieties_copy = tea_varieties.copy()
print(tea_varieties_copy) # ркЖ example ркорк╛ркВ рк╢рлБркВ ркерк╛ркп ркЫрлЗ ркХрлЗ copy method ркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлЗрк▓ ркЫрлЗ ркдрлЛ ркПркирк╛ рк▓рлАркзрлЗ memory ркорк╛ркВ ркПркХ ркирк╡рлБркВ reference ркмркирлЗ ркЫрлЗ tea_varieties_copy ркирлБркВ ркЬрлЗркорк╛ркВ tea_varieties рк▓рк┐рк╕рлНркЯ ркирлА copy ркЫрлЗ ркЯрлБркВркХ ркорк╛ркВ memory ркорк╛ркВ ркирк╡рлА ркЬркЧрлНркпрк╛ рк░рлЛркХрк╛ркп ркЫрлЗ ркЕркирлЗ main list ркирлЗ ркХркИ рккркг ркиркЗ ркерк╛ркп 

tea_varieties_copy.append("Lemon")
print(tea_varieties_copy)

# range method ркирк╛ examples ркирлАркЪрлЗ ркжрк░рлНрк╢рк╛рк╡рлЗрк▓ ркЫрлЗ тмЗя╕П 

print(range(10))

x = range(10)

for x in range(10):
    print(x**2) # рк╣рк╡рлЗ ркЖ example ркорк╛ркВ ркеркпрлБркВ ркЫрлЗ рк╢рлБркВ ркХрлЗ рккрлЗрк▓рк╛ ркдрлЛ x ркирк╛рко ркирлБркВ variable declare ркХрк░рлНркпрлБркВ che ркЕркирлЗ ркПркирлА ркЕркВркжрк░ range ркЖрккрлА che 1 ркерлА рк▓ркИ ркирлЗ 10 рк╕рлБркзрлА ркирлА ркПркирк╛ рккркЫрлА for loop ркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлА x ркирлА ркЕркВркжрк░ ркЬрлЗ range ркЖрккрлА ркЫрлЗ ркПркирлЗ range sathe ркЬ ркоркбрк╛рк╡рлАркирлЗ print ркорк╛ркВ x ** 2 ркХрк░рк╛рк╡рлА ркжрлАркзрлБркВ ркЫрлЗ рк╣рлЗрк╡ ркЖ example ркирлЗ рк╢рлЛрк░рлНркЯ рк░рлАркдрлЗ рк▓ркЦрк╡рлБркВ рк╣рлЛркп ркдрлЛркп рк░рк╕рлНркдрлЛ ркЫрлЗ ркЬрлЗ ркирлАркЪрлЗ ркжрк░рлНрк╢рк╛рк╡рлЗрк▓ ркЫрлЗ тмЗя╕П 

squared_num = [x**2 for x in range(10)]
print(squared_num)

cube_num = [y**3 for y in range(10)]
print(cube_num)

# ------------------------*----------------------------------------*---------------


